{"name":"Checkout","tagline":"A Ruby program to build a checkout system","body":"# Checkout [![Build Status](https://travis-ci.org/hsheikhm/Checkout.svg?branch=master)](https://travis-ci.org/hsheikhm/Checkout) [![Coverage Status](https://coveralls.io/repos/github/hsheikhm/Checkout/badge.svg?branch=master)](https://coveralls.io/github/hsheikhm/Checkout?branch=master)\r\n\r\n* [Task](#task)\r\n* [My Approach](#my-approach)\r\n* [Directory Structure](#directory-structure)\r\n* [Feature Test Sample](#feature-test-sample)\r\n* [Download Instructions](#download-instructions)\r\n\r\n## Task\r\n\r\nBuild a Checkout system in Ruby.\r\n\r\n## My Approach\r\n\r\nInitially I played around in irb to see what kind of objects and methods would need to be created. From that I put together a **Domain Model** to organise the objects. Then I decided on the number of classes that would be needed, in this case four (listed below). Once I had a clear picture, I next began writing my [tests](https://github.com/hsheikhm/Checkout/tree/master/spec) and making them pass one by one.\r\n\r\nThroughout my code I kept strict to the **SOLID** principles and made use of **Single Responsibility Principle (SRP)** and **Dependency Injection (DI)**. I structured my code into 4 separate classes with each having its own responsibility. I also aimed to keep each method to having only one responsibility too. As for DI, you will see that I had incorporated this into my **Checkout** and **Order** classes within the ***initialize*** method. As a result I was able to use the **London Style** (as opposed to Chicago Style) when it came to my **RSpec** testing since I could use ***doubles*** to represent my other class objects. This allowed all my unit tests to become isolated.\r\n\r\n* [Checkout](https://github.com/hsheikhm/Checkout/blob/master/lib/checkout.rb) (Responsible for creating an order instance and a set of promotional rules. Responsible for scanning items and retrieving the total price after discounts).\r\n* [Products](https://github.com/hsheikhm/Checkout/blob/master/lib/products.rb) (Responsible for listing all products available. Any new product can easily be added into this class).\r\n* [Order](https://github.com/hsheikhm/Checkout/blob/master/lib/order.rb) (Responsible for creating a basket, adding items to the basket, calculating the total price and applying any eligible discounts).\r\n* [Promotional rules](https://github.com/hsheikhm/Checkout/blob/master/lib/promotional_rules.rb) (Responsible for listing all the promotional rules. A new rule can easily be added into this class).\r\n\r\n## Directory Structure\r\n\r\n```\r\n├── lib/\r\n│   ├── checkout.rb\r\n│   ├── order.rb\r\n│   ├── products.rb\r\n│   └── promotional_rules.rb\r\n│   \r\n├── spec/\r\n│   ├── checkout_spec.rb\r\n│   ├── order_spec.rb\r\n│   ├── products_spec.rb\r\n│   ├── promotional_rules_spec.rb\r\n│   └── spec_helper.rb\r\n│\r\n```\r\n\r\n## Feature Test Sample\r\n\r\n***New Checkout object:***\r\n```\r\n2.2.3 :002 > co = Checkout.new\r\n```\r\n\r\n***Checkout can scan items which are added to the basket:***\r\n```\r\n2.2.3 :003 > co.scan(001)\r\n => 1\r\n2.2.3 :004 > co.scan(002)\r\n => 1\r\n2.2.3 :005 > co.scan(003)\r\n => 1\r\n```\r\n\r\n***Checkout can calculate the total price:***\r\n```\r\n2.2.3 :006 > co.total\r\n => \"£66.78\"\r\n```\r\n\r\n# Download Instructions\r\n\r\n```\r\n$ git clone https://github.com/hsheikhm/Checkout.git\r\n$ cd Checkout\r\n$ irb\r\n$ require './lib/checkout.rb'\r\n```\r\n\r\nAuthor: [Hamza Sheikh](https://github.com/hsheikhm)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}